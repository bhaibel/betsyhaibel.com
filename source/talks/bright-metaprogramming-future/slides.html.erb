---
title: Your Bright Metaprogramming Future
description: A talk about metaprogramming in Ruby, and fixing bad metaprogramming.
layout: reveal
---

<section>
  <h1>
    Your Bright Metaprogramming Future
  </h1>
</section>

<section>
  <h1>What is Metaprogramming?</h1>
  <ul>
    <li class='fragment'>not Skynet</li>
    <li class='fragment'>not Perl</li>
    <li class='fragment'>code that thinks of program structure as just another thing to manipulate.</li>
  </ul>
</section>

<section>
  <h1>Object#send</h1>
  <p>(it's not just for invoking private methods any more!)</p>
</section>

<section>
  <img src='images/send-to-self.png' class='diff' />
</section>

<section>
  <h1>Object#send</h1>
  <h2>What it does</h2>
  <h3>sends a message to an object</h3>
  <pre><code>
class Foo
  def bar(*args)
    'baz'
  end
end

a = Foo.new

a.bar("a", 2, 5, :some_other_argument)
=> 'baz'
a.send(:bar, "a", 2, 5, :some_other_argument)
=> 'baz'
  </code></pre>
</section>

<section>
  <h1>Object#send</h1>
  <h2>The Giant Case Statement</h2>
  <pre><code>
class Foo
  def send(method_name, *args)
    case method_name.to_sym
    when :bar
      'baz'
    when :a
      'b'
    # ....
  end
end
  </code></pre>
</section>

<section>
  <img src='images/send-to-self.png' class='diff' />
</section>

<section>
  <h1>Object#send</h1>
  <h2>Babby's first send</h2>

  <pre><code class="ruby">



  Mailer.send_later :milestone_changed, project.owner, project



  </code></pre>

  <aside class='notes'>
    When I was a wee baby coder - Friday, the first week of my first Ruby job - I discovered Object#send and what it could do. I'd been working with delayed_job all day to do asynchronous transactional email. For those of you not familiar with the library, its core was the method `send_later`, which looked like this and which did, more or less, what it looks like  queued a job that would invoke the sent method name. 
  </aside>
</section>

<section>
  <h1>Object#send</h1>
  <h2>Babby's first send</h2>

  <pre><code class="ruby">
class ProjectObserver < ActiveRecord::Observer
  def after_update(project)
    if project.milestone_changed?
      Mailer.send_later :milestone_changed, project.owner, project
    end
  end
end
  </code></pre>

  <aside class="notes">
    I was using it in the context of a method that looked something like this - a straightforward observer that looked for attribute changes that would trigger emails, and queued them for sending if appropriate. I say "something like" this because actually the method looked more like this:
  </aside>
</section>

<section>
  <h1>Object#send</h1>
  <h2>Oh god what just happened</h2>

  <pre><code class="ruby">
class ProjectObserver < ActiveRecord::Observer
  def after_update(project)
    case
    when project.milestone_changed?
      Mailer.send_later :milestone_changed, project.owner, project
    when project.name_changed?
      Mailer.send_later :name_changed, project.owner, project
    when project.description_changed?
      Mailer.send_later :description_changed, project.owner, project
    when project.target_build_day_changed?
      Mailer.send_later :target_build_day_changed, project.owner, project
    end
  end
end
  </code></pre>

  <aside class="notes">
    (pause)
  </aside>
</section>

<section data>
  <h1>Object#send</h1>
  <h2 class="terrifyingly-strong-emphasis" style="color: red">Oh god what just happened</h2>

  <pre><code class='ruby'>
class ProjectObserver < ActiveRecord::Observer
  def after_update(project)
    case
    when project.milestone_changed?
      Mailer.send_later :milestone_changed, project.owner, project
    when project.name_changed?
      Mailer.send_later :name_changed, project.owner, project
    when project.description_changed?
      Mailer.send_later :description_changed, project.owner, project
    when project.target_build_day_changed?
      Mailer.send_later :target_build_day_changed, project.owner, project
    end
  end
end
  </code></pre>

  <aside class='notes'>
    I did not like this code. It got the job done, but I didn't like how it got it done. I'd trained in C and Java and Perl, so I was used to the idea that method names were inviolable, and entirely separate from the data that the methods were acting upon. When you're coming from that mindset, you accept a certain amount of repetition and boilerplate as inevitable. You write thirty getter and setter methods for a class's attributes, individually, each one line long and formulaic as a Garfield strip.

    I resented the hell out of this, but I didn't know how to improve on it. I thought you couldn't.

    And then I looked at the `#send_later` method, and cocked my head, and asked myself if its name was riffing off of something named `#send`....
  </aside>
</section>

<section>
  <h1>Object#send</h1>
  <h2>Great triumph!</h2>

  <pre><code class='ruby'>
class ProjectObserver < ActiveRecord::Observer
  def after_update(project)
    [:milestone, :name, :description, :build_day].each do |attribute|
      if project.send "#{attribute}_changed?"
        Mailer.send_later "#{attribute}_changed", project.owner, project
      end
    end
  end
end
  </code></pre>

  <aside class='notes'>
    Some Googling and twenty-thirty minutes later, the code looked more like this:
  </aside>
</section>

<section>
  <img src='images/project-observer-diff.png' class='diff' />
</section>

<section>
  <h1>Object#send</h1>
  <h2>Great triumph!</h2>

  <img src="images/tangled-still.gif" />

</section>


<section>
  <h1>Object#send</h1>
  <h2>Great triumph!</h2>

  <img src="http://mashable.com/wp-content/uploads/2013/07/Tangled.gif" />
</section>

<section>
  <h1>Object#send</h1>
  <h2>Great triumph!</h2>

  <img src="images/tangled-still.gif" />

</section>


<section>
  <h1>Object#send</h1>
  <h2>A maze of twisty little #send calls, all alike</h2>
</section>

<section>
  <pre><code class='ruby'>
class SomeCallingClass
  def available_patterns(options)
    results = Searcher.search(garment, user_type, options)
    Formatter.send("format_#{garment}_results_for_#{user_type}", results)
  end
end

class Searcher
  def search(garment, user_type, options)
    results = garment.camelcase.constantize.visible_to(user_type).where(options)
  end
end
  </code></pre>
</section>

<section>
  <pre><code class='ruby'>
Formatter.send("format_#{garment}_results_for_#{user_type}", results)

case garment
when 'sweater'
  case user_type
  when 'admin'
    Formatter.format_sweater_results_for_admin(results)
  when 'user'
    Formatter.format_sweater_results_for_user(results)
  end
when 'hat'
  case user_type
  when 'admin'
    Formatter.format_hat_results_for_admin(results)
  when 'user'
    Formatter.format_hat_results_for_user(results)
  end
end

class Searcher
  def search(garment, user_type, options)
    results = garment.camelcase.constantize.visible_to(user_type).where(options)
  end
end
  </code></pre>
</section>

<section>
  <pre><code class='ruby'>
class Formatter
  def self.format_sweater_results_for_admin(results)
    CSV.generate do |csv|
      results.each do |result|
        arr = [:id, :name, :yarn_name, :yardage, :sleeve_length, :currently_promoting?].map do |attribute|
          result.send(attribute)
        end
        csv << arr
      end
    end
  end

  def self.format_sweater_results_for_user(results)
    results.map do |x|
      [:name, :yarn_name, :yardage, :sleeve_length].map { |attribute| result.send(attribute) } 
    end.to_json
  end

  def self.format_hat_results_for_user(results)
    results.map do |x|
      [:name, :yarn_name, :earflaps?].map { |attribute| result.send(attribute) } 
    end.to_json
  end
end
  </code></pre>
</section>

<section>
  <img src='images/formatter-diff-01.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-02.png' class='diff' />
</section>

<section>
  <pre><code class='ruby'>
class Formatter
  def format_sweater_results_for_admin
    CSV.generate do |csv|
      results.each do |result|
        arr = [:id, :name, :yarn_name, :yardage, :sleeve_length, :currently_promoting?].map do |attribute|
          result.send(attribute)
        end
        csv << arr
      end
    end
  end

  def format_sweater_results_for_user
    results.map do |x|
      [:name, :yarn_name, :yardage, :sleeve_length].map { |attribute| result.send(attribute) } 
    end.to_json
  end
end
  </code></pre>
</section>

<section>
  <img src='images/formatter-diff-03.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-04.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-05.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-06.png' class='diff' />
</section>

<section>

  <pre><code class='ruby'>
class Formatter
  def format_sweater_results_for_user
    results.map(&:to_formatter_data).to_json
  end

  def format_sweater_results_for_admin
    CSV.generate do |csv|
      results.each do |result|
        csv << result.to_formatter_data(admin: true)
      end
    end
  end

  def format_hat_results_for_user
    results.map(&:to_formatter_data).to_json
  end
end
  </code></pre>
</section>

<section>
  <img src='images/formatter-diff-07.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-08.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-09.png' class='diff' />
</section>

<section>
  <img src='images/formatter-diff-10.png' class='diff' />

  <aside class='notes'>
    Either case is plenty, though. The ability to use strings and symbols to represent methods, classes, and other Ruby abstractions variably is one of Ruby's coolest features and the fact that it can be used for evil shouldn't keep us from using it at all. It's a tool. As long as you understand how const_get works, this line is perfectly readable, and since its effects are isolated within the Formatter class it doesn't matter that it's hard to grep.
  </aside>
</section>

<section>
  <img src='images/formatter-diff-09.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
</section>

<section>
  <h1>#method_missing</h1>

  <pre><code class='ruby'>
Project#name_changed?
Project#milestone_changed?
  </code></pre>
</section>

<section>
  <img src='images/send-to-self.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-01.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-02.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-03.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <pre><code class='ruby'>
    def method_missing(name, *args, &block)
  </code></pre>
</section>

<section>
  <img src='images/lookup-chain-04.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-05.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-06.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-07.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>in the wild (kinda...)</h2>
  <pre><code class='ruby'>
class ActiveRecord::Base
  def method_missing(name, *args, &block)
    if name.ends_with('_changed?')
      attribute_changed?(name.gsub(/_changed?/, ''))
    end
  end
end
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>don't ruin it!</h2>
  <img src='images/ar-01.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>don't ruin it!</h2>
  <pre><code class='ruby'>
Project.new.respond_to? :name_changed?
=> false
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>don't ruin it!</h2>
  <img src='images/ar-02.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>don't ruin it!</h2>
  <pre><code class='ruby'>
Project.new.respond_to? :name_changed?
=> true
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>don't ruin it!</h2>
  <img src='images/ar-03.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world don'ts</h2>
  <pre><code class='ruby'>
module HasBreeds
  def breeds
    breed_codes.uniq.map { |code| Breed.new(code) }
  end

  def breed_codes
    raise NotImplementedError
  end
end
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world don'ts</h2>
  <pre><code class='ruby'>
class Cat < ActiveRecord::Base
  include HasBreeds
end

class Kennel < ActiveRecord::Base
  include HasBreeds

  has_many :cats

  def breed_codes
    joins(:cats).pluck(:breed_codes).uniq
  end
end
  </code></pre>
</section>

<section>
  <img src='images/lookup-chain-for-ar-01.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-for-ar-02.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-for-ar-03.png' class='diff' />
</section>

<section>
  <img src='images/lookup-chain-for-ar-04.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world don'ts</h2>
  <pre><code class='ruby'>
module HasBreeds
  def method_missing(name, *args)
    if name == :breed_codes
      raise NotImplementedError
    else
      super
    end
  end
end
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world maybes</h2>
  <pre><code class='ruby'>
class Cat < ActiveRecord::Base
  include HasBreeds

  def breed_codes
    super
  end
end
  </code></pre>
</section>

<section>
  <img src='images/lookup-chain-for-ar-03.png' class='diff' />
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world maybes</h2>
  <pre><code class='ruby'>
module HasBreeds
  def breed_codes
    super
  rescue NoMethodError
    raise NotImplementedError
  end
end
  </code></pre>
</section>

<section>
  <h1>#method_missing</h1>
  <h2>real-world dos</h2>
  <ul>
    <li>pretty dynamic DSLs: <code class='ruby'>Hat.find_by_yarn_and_size</code></li>
    <li>global config objects: <code class='ruby'>Config.some_random_key_name</code></li>
    <li>delegators</li>
  </ul>
  <h2 class='fragment'>
    ...but there are other ways</h2>
  </h2>
</section>

<section>
  <h1>#define_method</h1>
</section>

<section>
  <h1>#define_method</h1>
  <pre><code class='ruby'>
define_method :name do |*args|
end
  </code></pre>
</section>

<section>
  <h1>#define_method</h1>
  <pre><code class='ruby'>
class Cat
  attr_accessor :photo

  def photo_url
    photo.url
  end

  def photo_name
    photo.name
  end

  def photo_path
    photo.path
  end
end
  </code></pre>
</section>

<section>
  <img src='images/cat-01.png' class='diff' />
</section>

<section>
  <img src='images/cat-02.png' class='diff' />
</section>

<section>
  <img src='images/stormycat-inna-bag.jpg' class='diff' />
</section>

<section>
  <img src='images/cat-02.png' class='diff' />
</section>

<section>
  <img src='images/anonymous-module-diff.png' class='diff' />
</section>

<section>
  <img src='images/anonymous-module.png' class='diff' />
</section>

<section>
  <img src='images/named-module-diff.png' class='diff' />
</section>

<section>
  <h1>Takeaways</h1>
  <ul>
    <li>It's all data to Ruby. It should be to you too.</li>
    <li>Can you grep for it? Do you need to?</li>
    <li>Can you extend it later? Do you need to?</li>
    <li>Can you debug it later? You <strong>will</strong> need to.</li>
    <li>Does the parameter go in the method name or the method signature?</li>
    <li>Have fun!</li>
  </ul>
</section>

<section>
  <h1>Me!</h1>
  <ul>
    <li>Betsy Haibel</li>
    <li>Optoro</li>
    <li>betsyhaibel.com</li>
    <li>github.com/bhaibel</li>
    <li>@betsythemuffin</li>
    <li>betsy.haibel@gmail.com</li>
  </ul>
  <h2>Slides!</h2>
  <p>http://betsyhaibel.com/talks/bright-metaprogramming-future/slides</p>
</section>

<section>
  <img src="https://pbs.twimg.com/media/BvP1OdVIEAEWwkF.jpg"  style='margin-top: -12em' />
<section>
